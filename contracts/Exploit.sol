// SPDX-License-Identifier: MIT
pragma solidity=0.8.0;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Exploit {
    address immutable attacker;
    address constant aave = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;

    constructor() public {
        attacker = msg.sender;
    }

    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    )
        external
        returns (bool)
    {
        for (uint i = 0; i < assets.length; i++) {
            // TODO put exploit body here


            // 5. return the profits
            uint profit = IERC20(assets[i]).balanceOf(address(this)) - amounts[i] - premiums[i];
            IERC20(assets[i]).transfer(attacker, profit);

            // 6. return the flash loan
            IERC20(assets[i]).approve(address(aave), amounts[i] + premiums[i]);
        }
        return true;
    }
}
